# Root 
(rule $ROOT ($Regex) (IdentityFn)) 
(rule $ROOT ($Skip $Regex) (SelectFn 1))




# Rules for composition 

(rule $Regex ($CC) (IdentityFn))
(rule $Regex ($OpContain $Regex) (lambda x (lambda y (call regex.RegexFunctions.contain (var y)))))
(rule $Regex ($Regex $OpAnd $Regex) (lambda x (lambda y (lambda z (call regex.RegexFunctions.and (var x) (var z))))))
(rule $Regex ($Regex $OpAnd $Regex) (lambda x (lambda y (lambda z (call regex.RegexFunctions.and (var z) (var x))))))
(rule $Regex ($OpContain $INT $Regex) (lambda x (lambda y (call regex.RegexFunctions.repeat (var x) (var y)))))
(rule $Regex ($OpNotContain $Regex) (lambda x (lambda y (call regex.RegexFunctions.not (call regex.RegexFunctions.contain (var y))))))
(rule $Regex ($OpStart $Regex) (lambda x (lambda y (call regex.RegexFunctions.startwith (var y)))))
(rule $Regex ($OpEnd $Regex) (lambda x (lambda y (call regex.RegexFunctions.endwith (var y)))))
(rule $Regex ($Regex $OpRepeat $INT) (lambda x (lambda y (lambda z (call regex.RegexFunctions.repeat (var x) (var z))))))
(rule $Regex ($OpRepeat $Regex $INT) (lambda x (lambda y (lambda z (call regex.RegexFunctions.repeat (var y) (var z))))))
(rule $Regex ($Regex $INT $OpRepeat) (lambda x (lambda y (lambda z (call regex.RegexFunctions.repeat (var x) (var y))))))
(rule $Regex ($Regex $OpFollow $Regex) (lambda x (lambda y (lambda z (call regex.RegexFunctions.followedby (var x) (var z))))))
(rule $Regex ($Regex $OpFollow $Regex) (lambda x (lambda y (lambda z (call regex.RegexFunctions.followedby (var z) (var x))))))
(rule $Regex ($OpNot $Regex) (lambda x (lambda y (call regex.RegexFunctions.not (var y)))))
(rule $Regex ($Regex $OpOr $Regex) (lambda x (lambda y (lambda z (call regex.RegexFunctions.or (var x) (var z))))))
(rule $Regex ($Regex $OpOr $Regex) (lambda x (lambda y (lambda z (call regex.RegexFunctions.or (var z) (var x))))))
(rule $Regex ($INT $Regex) (lambda x (lambda y  (call regex.RegexFunctions.repeat (var y) (var x)))))




# Rules for parsing keywords with skipping
# Parsed to CC and OpXXX

## CC rules 

(rule $CC ($CC1) (IdentityFn)) 

(rule $CC ($CC1 $Skip) (SelectFn 0))

## OpContain rules 

(rule $OpContain ($OpContain1) (IdentityFn))

(rule $OpContain ($OpContain1 $Skip) (SelectFn 0))

## OpAnd rules 

(rule $OpAnd ($OpAnd1) (IdentityFn))

(rule $OpAnd ($OpAnd1 $Skip) (SelectFn 0))

## OpStart rules 

(rule $OpStart ($OpStart1) (IdentityFn))

(rule $OpStart ($OpStart1 $Skip) (SelectFn 0))

## OpEnd rules 

(rule $OpEnd ($OpEnd1) (IdentityFn))

(rule $OpEnd ($OpEnd1 $Skip) (SelectFn 0))

## OpRepeat rules 

(rule $OpRepeat ($OpRepeat1) (IdentityFn))

(rule $OpRepeat ($OpRepeat1 $Skip) (SelectFn 0))

## OpFollow rules 

(rule $OpFollow ($OpFollow1) (IdentityFn))

(rule $OpFollow ($OpFollow1 $Skip) (SelectFn 0))

## OpNot rules 

(rule $OpNot ($OpNot1) (IdentityFn))

(rule $OpNot ($OpNot1 $Skip) (SelectFn 0))

## OpOr rules 

(rule $OpOr ($OpOr1) (IdentityFn))

(rule $OpOr ($OpOr1 $Skip) (SelectFn 0))

## OpNotContain rules 

(rule $OpNotContain ($OpNotContain1) (IdentityFn))

(rule $OpNotContain ($OpNotContain1 $Skip) (SelectFn 0))




# Rules for parsing keywords without skipping 
# Parsed to CC1 and OpXXX1

(rule $CC1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.cc)))

(rule $OpContain1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.contain)))
(rule $OpAnd1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.and)))
(rule $OpStart1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.startwith)))
(rule $OpEnd1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.endwith)))
(rule $OpRepeat1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.repeat)))
(rule $OpFollow1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.followedby)))
(rule $OpNot1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.not)))
(rule $OpOr1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.or)))
(rule $OpNotContain1 ($LEMMA_PHRASE) (SimpleLexiconFn (type fb:type.op.notcontain)))



# Skipping rule

(rule $Skip ($LEMMA_PHRASE) (ConstantFn null))



# INT rule

(rule $INT ($LEMMA_PHRASE) (NumberFn))


